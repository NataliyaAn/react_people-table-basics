{"version":3,"sources":["components/PageNavLink.tsx","components/MainNav.tsx","App.tsx","page/PageNotFound.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","page/PeoplePage.tsx","page/Home.tsx","index.tsx"],"names":["PageNavLink","to","textLink","className","isActive","classNames","MainNav","role","App","PageNotFound","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","nameCorrect","undefined","slug","sex","PeopleTable","people","selectedPerson","isLoader","messageError","isError","isSelected","personByName","personName","find","person1","length","map","born","died","fatherName","motherName","PeoplePage","useState","setPeople","setLoader","setError","setMessageError","useParams","useEffect","catch","finally","Home","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.ecf10f9c.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  textLink: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({\n  to, textLink,\n}) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n  >\n    {textLink}\n  </NavLink>\n);\n","// import React from 'react';\nimport { PageNavLink } from './PageNavLink';\n\nexport const MainNav = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" textLink=\"Home\" />\n        <PageNavLink to=\"people\" textLink=\"People\" />\n\n      </div>\n    </div>\n  </nav>\n);\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { MainNav } from './components/MainNav';\n\nexport const App: React.FC = () => (\n  <div data-cy=\"app\">\n    <MainNav />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const PageNotFound = () => (<h1 className=\"title\">Page not found</h1>);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person | undefined;\n  name:string | null;\n};\n\nexport const PersonLink : React.FC <Props> = ({ person, name }) => {\n  const nameCorrect = (!name) ? '-' : name;\n\n  return (\n    <td>\n      { person === undefined\n        ? nameCorrect\n        : (\n          <Link\n            to={`../${person.slug}`}\n            className={classNames(\n              { 'has-text-danger': person.sex === 'f' },\n            )}\n          >\n            {nameCorrect}\n          </Link>\n        )}\n    </td>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person [];\n  selectedPerson: string;\n  isLoader: boolean;\n  messageError: string;\n  isError: boolean;\n\n};\n\nexport const PeopleTable:React.FC <Props> = ({\n  people,\n  selectedPerson,\n  isLoader,\n  messageError,\n  isError,\n}) => {\n  const isSelected = (person: Person) => person.slug === selectedPerson;\n  const personByName = (personName: string | null) => {\n    return people.find(person1 => person1.name === personName);\n  };\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n\n        {isLoader && (<Loader />)}\n\n        { messageError !== '' && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            {messageError}\n          </p>\n        )}\n        { !isError && people?.length > 0\n          && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {people.length > 0\n                  && people.map(person => {\n                    const {\n                      name,\n                      sex,\n                      born,\n                      died,\n                      fatherName,\n                      motherName,\n                      slug,\n                    } = person;\n\n                    return (\n                      <tr\n                        data-cy=\"person\"\n                        key={slug}\n                        className={classNames(\n                          { 'has-background-warning': isSelected(person) },\n                        )}\n                      >\n                        <PersonLink\n                          name={name}\n                          person={personByName(name)}\n                        />\n\n                        <td>{sex}</td>\n                        <td>{born}</td>\n                        <td>{died}</td>\n                        <PersonLink\n                          name={motherName}\n                          person={personByName(motherName)}\n                        />\n                        <PersonLink\n                          name={fatherName}\n                          person={personByName(fatherName)}\n                        />\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          )}\n\n        {!isError && people.length === 0\n         && (\n           <p data-cy=\"noPeopleMessage\">\n             There are no people on the server\n           </p>\n         )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\n\nexport const PeoplePage:React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoader, setLoader] = useState(true);\n  const [isError, setError] = useState(true);\n  const [messageError, setMessageError] = useState('');\n  const { slug = '' } = useParams();\n\n  useEffect(() => {\n    setError(true);\n    getPeople()\n      .then(response => {\n        setPeople(response);\n        setError(false);\n        setMessageError('');\n      })\n      .catch(() => {\n        setMessageError('Something went wrong');\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <PeopleTable\n        people={people}\n        selectedPerson={slug}\n        isLoader={isLoader}\n        messageError={messageError}\n        isError={isError}\n      />\n    </>\n\n  );\n};\n","export const Home = () => (<h1 className=\"title\">Home Page</h1>);\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PageNotFound } from './page/PageNotFound';\nimport { PeoplePage } from './page/PeoplePage';\nimport { Home } from './page/Home';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route\n            path=\"*\"\n            element={<PageNotFound />}\n          />\n          <Route index element={<Home />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n        </Route>\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}